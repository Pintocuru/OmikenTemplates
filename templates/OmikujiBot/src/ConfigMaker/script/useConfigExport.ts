// composables/useConfigExport.ts
import { ref } from 'vue';

export type ExportType = 'config' | 'template';

export interface ExportOptions {
 type: ExportType;
 filename: string;
 contentType: string;
 generateContent: (data: string) => string;
}

export const useConfigExport = () => {
 const isExporting = ref(false);
 const errorMessage = ref('');

 // JavaScript設定ファイルの内容を生成
 const generateJSFileContent = (configData: string): string => {
  const timestamp = new Date().toISOString();

  return `// Generated by Omikuji Config Maker
// Generated at: ${timestamp}
// 
// このファイルはコンフィグエディターで生成されました。
// 手動で編集する場合は、JSON形式の構文エラーにご注意ください。

const omikujiData = ${configData};

if (typeof window !== 'undefined') window.omikujiData = omikujiData;

`;
 };

 // JSONテンプレートファイルの内容を生成
 const generateJSONTemplateContent = (configData: string): string => {
  const timestamp = new Date().toISOString();
  const parsedData = JSON.parse(configData);

  // テンプレート用のメタデータを追加
  const templateData = {
   _metadata: {
    type: 'omikuji-template',
    version: '1.0.0',
    generatedAt: timestamp,
    description: 'Omikuji設定テンプレート - 他のプロジェクトのベースとしてご利用ください'
   },
   ...parsedData
  };

  return JSON.stringify(templateData, null, 2);
 };

 // ファイルダウンロード処理
 const downloadFile = (content: string, filename: string, contentType: string): boolean => {
  try {
   const blob = new Blob([content], { type: contentType });
   const url = URL.createObjectURL(blob);
   const link = document.createElement('a');

   link.href = url;
   link.download = filename;
   document.body.appendChild(link);
   link.click();
   document.body.removeChild(link);

   URL.revokeObjectURL(url);
   return true;
  } catch (error) {
   console.error('File download error:', error);
   return false;
  }
 };

 // 汎用エクスポート処理
 const exportFile = async (configData: string, options: ExportOptions): Promise<boolean> => {
  if (isExporting.value) return false;

  try {
   isExporting.value = true;
   errorMessage.value = '';

   const content = options.generateContent(configData);
   const success = downloadFile(content, options.filename, options.contentType);

   if (!success) {
    errorMessage.value = 'ファイルのダウンロードに失敗しました。';
   }

   return success;
  } catch (error) {
   console.error('Export error:', error);
   errorMessage.value = 'ファイルの生成中にエラーが発生しました。';
   return false;
  } finally {
   isExporting.value = false;
  }
 };

 // 設定ファイル出力
 const exportConfigFile = async (configData: string): Promise<boolean> => {
  return exportFile(configData, {
   type: 'config',
   filename: 'omikujiData.js',
   contentType: 'application/javascript',
   generateContent: generateJSFileContent
  });
 };

 // テンプレートファイル出力
 const exportTemplateFile = async (configData: string): Promise<boolean> => {
  return exportFile(configData, {
   type: 'template',
   filename: 'omikuji-template.json',
   contentType: 'application/json',
   generateContent: generateJSONTemplateContent
  });
 };

 // エラーをクリア
 const clearError = () => {
  errorMessage.value = '';
 };

 return {
  // State
  isExporting,
  errorMessage,

  // Actions
  exportConfigFile,
  exportTemplateFile,
  clearError
 };
};
